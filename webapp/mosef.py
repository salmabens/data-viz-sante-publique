import os
import requests
import gc  # garbage collection
import plotly.express as px
import streamlit as st
import pandas as pd
import plotly.express as px
import folium
import pandas as pd
from streamlit_folium import st_folium


# Charger les donn√©es (avec mise en cache pour am√©liorer les performances)
@st.cache_data
def load_patients_by_region_data(year):
    file_path = f'../data/patients_by_region_pathology_{year}.csv'
    return pd.read_csv(file_path)

@st.cache_data
def load_patients_by_department_data(year):
    file_path = f'../data/patients_by_department_pathology_{year}.csv'
    return pd.read_csv(file_path)

@st.cache_data
def load_patients_by_gender_data(year):
    file_path = f'../data/patients_by_sexe_pathology_{year}.csv'
    return pd.read_csv(file_path)

@st.cache_data
def load_patients_by_age_group_data(year):
    file_path = f'../data/patients_by_age_group_pathology_{year}.csv'
    return pd.read_csv(file_path)

@st.cache_data
def load_staged_data(year):
    file_path = f'../data/staged_data_{year}.csv'
    return pd.read_csv(file_path)

@st.cache_data
def load_and_cache_data(year):
    staged_data_year = load_staged_data(year)
    staged_data_year = staged_data_year.loc[
        (staged_data_year["Department Name"] != "Hors France M√©tropolitaine") &
        (staged_data_year["Gender Label"] != "tous sexes") &
        (staged_data_year["Age Group Label"] != "tous √¢ges") &
        (staged_data_year["Department"] != 999) &
        (staged_data_year["Region"] != 99)
    ].copy()
    staged_data_year["Year"] = year
    return staged_data_year

# ƒê·ªãnh nghƒ©a danh s√°ch c√°c nƒÉm t·ª´ 2015 ƒë·∫øn 2022
years = list(range(2015, 2023))

###############################################################################################

# Sidebar: T·∫°o c√°c n√∫t th·∫£ xu·ªëng
with st.sidebar:

    st.title("Menu de Navigation")  # Ti√™u ƒë·ªÅ thanh b√™n

    # T·∫°o c√°c expander cho ƒëi·ªÅu h∆∞·ªõng
    page = None  # Bi·∫øn ƒë·ªÉ l∆∞u l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    with st.expander("üè† Accueil"):
        if st.button("Aller √† Accueil", key="accueil_button"):
            st.session_state.page = "Accueil"

    with st.expander("üó∫Ô∏è Analyse par r√©gion"):
        if st.button("Voir la Carte", key="region_button"):
            st.session_state.page = "R√©gion"

    with st.expander("üó∫Ô∏è Analyse par d√©partement"):
        if st.button("Voir la Carte", key="departement_button"):
            st.session_state.page = "D√©partement"

    with st.expander("üìä Analyse par √¢ge"):
        if st.button("Voir les diagrammes", key="age_button"):
            st.session_state.page = "Age"

    with st.expander("üìä Analyse par sexe"):
        if st.button("Voir les diagrammes", key="sexe_button"):
            st.session_state.page = "Sexe"

st.markdown("""
    <style>
    /* Thay ƒë·ªïi m√†u n·ªÅn c·ªßa sidebar */
    [data-testid="stSidebar"] {
        background-color: #00008B; /* M√†u xanh d∆∞∆°ng ƒë·∫≠m */
    }

    /* T√πy ch·ªânh ti√™u ƒë·ªÅ "Menu de Navigation" */
    [data-testid="stSidebar"] h1 {
        color: white; /* M√†u ch·ªØ tr·∫Øng */
        font-size: 22px; /* K√≠ch th∆∞·ªõc ch·ªØ */
        font-weight: bold; /* Ch·ªØ in ƒë·∫≠m */
    }

    /* T√πy ch·ªânh ti√™u ƒë·ªÅ c·ªßa c√°c expander */
    [data-testid="stSidebar"] .stExpander > div > div:first-child {
        font-size: 16px; /* K√≠ch th∆∞·ªõc ch·ªØ cho ti√™u ƒë·ªÅ expander */
        color: white; /* M√†u ch·ªØ tr·∫Øng */
        font-weight: bold; /* Ch·ªØ in ƒë·∫≠m */
    }

    /* T√πy ch·ªânh c√°c n√∫t b√™n trong expander */
    [data-testid="stSidebar"] .stButton button {
        color: white; /* M√†u ch·ªØ c·ªßa n√∫t */
        font-weight: 300; /* Ch·ªØ m·ªèng */
        background-color: #1b1bf7; /* M√†u n·ªÅn c·ªßa n√∫t */
        border: 1px solid white; /* Vi·ªÅn n√∫t m√†u tr·∫Øng */
        border-radius: 15px; /* Bo tr√≤n c√°c g√≥c c·ªßa n√∫t */
        font-size: 16px; /* K√≠ch th∆∞·ªõc ch·ªØ nh·ªè h∆°n */
        padding: 6px 12px; /* Gi·∫£m padding ƒë·ªÉ n√∫t g·ªçn h∆°n */
    }

    /* Khi hover v√†o n√∫t */
    [data-testid="stSidebar"] .stButton button:hover {
        background-color: #0059b3; /* M√†u n·ªÅn khi hover */
        color: #ffffff; /* M√†u ch·ªØ khi hover */
    }

    /* T√πy ch·ªânh expander */
    [data-testid="stSidebar"] .stExpander {
        border: 0.7px solid white; /* Vi·ªÅn m√†u tr·∫Øng cho expander */
        border-radius: 10px; /* Bo tr√≤n c√°c g√≥c c·ªßa expander */
        margin-bottom: 10px; /* Kho·∫£ng c√°ch gi·ªØa c√°c expander */
    }

    /* T√πy ch·ªânh ch·ªØ b√™n trong expander */
    [data-testid="stSidebar"] .stExpander div {
        color: white; /* M√†u ch·ªØ tr·∫Øng */
        font-size: 16px; /* K√≠ch th∆∞·ªõc ch·ªØ nh·ªè h∆°n */
        font-weight: 300; /* Ch·ªØ m·ªèng h∆°n cho n·ªôi dung */
    }
    </style>
""", unsafe_allow_html=True)


###############################################################################################

# Main Content: Hi·ªÉn th·ªã n·ªôi dung theo trang ƒë∆∞·ª£c ch·ªçn
# Ki·ªÉm tra v√† kh·ªüi t·∫°o gi√° tr·ªã cho st.session_state.page
if "page" not in st.session_state:
    st.session_state.page = "Accueil"  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh ban ƒë·∫ßu

# Main Content: Hi·ªÉn th·ªã n·ªôi dung theo trang ƒë∆∞·ª£c ch·ªçn
if st.session_state.page == "Accueil" or "page" not in locals():

    # ƒê∆∞·ªùng d·∫´n t·ªõi logo
    logo_path = os.path.abspath("static/logo.jpeg")

    # T·∫°o b·ªë c·ª•c v·ªõi st.columns ƒë·ªÉ cƒÉn gi·ªØa logo
    col1, col2, col3 = st.columns([3, 3, 2])  # T·∫°o 3 c·ªôt v·ªõi c·ªôt gi·ªØa r·ªông h∆°n

    with col2:  # ƒê·∫∑t logo ·ªü c·ªôt gi·ªØa
        st.image(logo_path, use_container_width =False, width=150)

    # Ti√™u ƒë·ªÅ trang
    st.markdown("""
        <h1 style="color: #00008B; text-align: center; font-size: 34px;">
            Bienvenue sur DataViz Sant√© Publique
        </h1>
    """, unsafe_allow_html=True)

    # N·ªôi dung ch√≠nh ƒë∆°n gi·∫£n h√≥a
    st.markdown("""
        <style>
            .highlight {
                color: #1b1bf7; 
                font-weight: bold;
            }
            .section-title {
                color: #007bff; 
                font-size: 20px; 
                font-weight: bold; 
                margin-top: 20px;
            }
        </style>
    """, unsafe_allow_html=True)

    st.markdown("""
        ### Votre outil d'analyse et de visualisation des donn√©es de sant√© publique.
        Notre plateforme offre une exploration d√©taill√©e des 
        <span class="highlight">donn√©es actualis√©es de 2015 √† 2022</span>, fournies par l‚ÄôAssurance Maladie, couvrant un large √©ventail de pathologies, 
        traitements chroniques et √©pisodes de soins. Con√ßue pour r√©pondre aux besoins des 
        <span class="highlight">mutuelles, professionnels de sant√©</span> et acteurs engag√©s dans la gestion des soins et d√©penses de sant√©, 
        elle vous aide √† prendre des d√©cisions √©clair√©es.
    """, unsafe_allow_html=True)

    st.markdown("""
        ### Pourquoi choisir notre plateforme ?
        - Analyse par **pathologie, traitement chronique** ou **√©pisode de soins**, d√©clin√©e par sexe, classe d‚Äô√¢ge, r√©gion et d√©partement.
        - Suivi des **pr√©valences (%)** et des **d√©penses rembours√©es** pour une meilleure compr√©hension des dynamiques de sant√©.
        - Comparaisons temporelles (**2015-2022**) pour identifier les tendances cl√©s par r√©gion ou d√©partement.
    """)

    st.markdown("""
        ### Applications concr√®tes pour les acteurs de la sant√© :
        - **Pour les mutuelles :** Ajustez vos offres en fonction des pathologies et besoins locaux.
        - **Pour les professionnels de sant√© :** Identifiez les besoins prioritaires pour planifier les soins et r√©partir les ressources.
        - **Pour les d√©cideurs publics :** Suivez l‚Äô√©volution des d√©penses et pathologies √©mergentes pour adapter les politiques publiques.
    """)

    st.markdown("""
        ### Caract√©ristiques de la population analys√©e :
        Les donn√©es couvrent **68,7 millions de b√©n√©ficiaires** de l‚Äôassurance maladie obligatoire en 2022, incluant :
        - Les individus ayant b√©n√©fici√© d‚Äôau moins une prestation rembours√©e (m√©decine, pharmacie, biologie, etc.).
        - Ceux ayant √©t√© hospitalis√©s dans un √©tablissement public ou priv√©.
        
        **Note :** Par respect pour le secret statistique, aucune donn√©e n‚Äôest communiqu√©e lorsque le nombre de patients pris en charge est inf√©rieur √† 11. 
        Ces cas sont indiqu√©s comme **¬´ Non significatif ¬ª**.
    """)

    st.markdown("""
        ### Explorez d√®s maintenant !
        **DataViz Sant√© Publique**, c‚Äôest une vision claire pour une meilleure sant√©. Utilisez nos outils interactifs pour analyser les dynamiques de sant√© √† travers la France. üåç
    """, unsafe_allow_html=True)

    # T·∫°o footer b·∫£n quy·ªÅn
    st.markdown("""
        <style>
        .footer {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #f1f1f1;
            color: #333;
            text-align: center;
            padding: 10px 0;
            font-size: 14px;
            font-family: Arial, sans-serif;
            box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);
        }
        </style>
        <div class="footer">
            ¬© 2024 DataViz Sant√© Publique. Tous droits r√©serv√©s. | 
            <a href="https://www.example.com" style="text-decoration: none; color: #007bff;">Politique de confidentialit√©</a> | 
            <a href="https://www.example.com" style="text-decoration: none; color: #007bff;">Conditions d'utilisation</a>
        </div>
    """, unsafe_allow_html=True)


###############################################################################################

elif st.session_state.page == "R√©gion":
    st.markdown("""
        <h1 style="color: #00008B; text-align: center; font-size: 30px;">
            Analyse des pathologies par r√©gion
        </h1>
    """, unsafe_allow_html=True)

   # L·ª±a ch·ªçn nƒÉm t·ª´ nƒÉm 2015 ƒë·∫øn 2022 v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 2022
    selected_year = st.selectbox(
        "Choisir l'ann√©e:", 
        list(range(2015, 2023)), 
        index=len(range(2015, 2023)) - 1,  # ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† nƒÉm cu·ªëi c√πng trong danh s√°ch (nƒÉm 2022)
        key="year_select"  # ƒê·∫∑t m·ªôt key duy nh·∫•t ƒë·ªÉ tr√°nh tr√πng l·∫∑p ID
    )

    # Load d·ªØ li·ªáu cho nƒÉm ƒë∆∞·ª£c ch·ªçn t·ª´ dictionary
    df = load_patients_by_region_data(selected_year)

    # G·ªôp CSS ƒë·ªÉ ch·ªânh s·ª≠a font ch·ªØ, ƒë·ªô d√†y c·ªßa c√°c thanh ch·ªçn v√† n·ªôi dung b√™n trong selectbox
    st.markdown("""
        <style>
        /* Ch·ªânh font ch·ªØ v√† ki·ªÉu d√°ng cho thanh selectbox */
        div[role="combobox"] > div {
            font-size: 12px;  /* C·ª° ch·ªØ nh·ªè */
            font-weight: 300;  /* Ch·ªØ m·∫£nh */
        }
        div[role="combobox"] > div > div {
            font-size: 12px;  /* C·ª° ch·ªØ cho c√°c t√πy ch·ªçn */
        }

        /* Thay ƒë·ªïi chi·ªÅu cao, g√≥c bo tr√≤n v√† m√†u n·ªÅn c·ªßa selectbox */
        div[data-baseweb="select"] {
            height: 35px;  /* ƒê·ªô cao c·ªßa thanh selectbox */
            border-radius: 5px;  /* G√≥c bo tr√≤n */
            background-color: #add8e6;  /* M√†u xanh d∆∞∆°ng nh·∫°t (LightBlue) */
            color: black;  /* M√†u ch·ªØ b√™n trong */
        }

        /* Thay ƒë·ªïi font ch·ªØ b√™n trong c√°c l·ª±a ch·ªçn */
        div[data-baseweb="select"] > div {
            font-size: 14px;  /* C·ª° ch·ªØ n·ªôi dung b√™n trong selectbox */
        }

        /* Thay ƒë·ªïi font ch·ªØ c·ªßa n·ªôi dung th·∫£ xu·ªëng */
        div[data-baseweb="select"] .css-1nfy0zz {
            font-size: 14px;  /* Font ch·ªØ nh·ªè h∆°n */
        }

        /* Thay ƒë·ªïi kho·∫£ng c√°ch v√† m√†u n·ªÅn khi hover */
        div[data-baseweb="select"] .css-1nfy0zz:hover {
            background-color: #87cefa; /* M√†u xanh d∆∞∆°ng s√°ng h∆°n khi hover (SkyBlue) */
        }
        </style>
    """, unsafe_allow_html=True)

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 1
    pathology_level_1_list = df['Pathology Level 1'].unique()

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 1 v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† "Diab√®te" n·∫øu c√≥
    default_index_level_1 = list(pathology_level_1_list).index("Cancers") if "Cancers" in pathology_level_1_list else 0
    selected_pathology_level_1 = st.selectbox(
        "Choisir la pathologie du niveau 1",
        pathology_level_1_list,
        index=default_index_level_1,
        key="pathology_level_1_select"
    )

    # L·ªçc d·ªØ li·ªáu theo Pathology Level 1
    filtered_df_level_1 = df[df['Pathology Level 1'] == selected_pathology_level_1]

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 2 t·ª´ d·ªØ li·ªáu ƒë√£ l·ªçc
    pathology_level_2_list = filtered_df_level_1['Pathology Level 2'].unique().tolist()

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 2
    selected_pathology_level_2 = st.selectbox(
        "Choisir la pathologie du niveau 2 (Sous-groupe de pathologies)",
        pathology_level_2_list,
        index=len(pathology_level_2_list) - 1,  # ƒê·∫∑t gi√° tr·ªã cu·ªëi l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        key="pathology_level_2_select"
    )
    filtered_df_level_2 = filtered_df_level_1[filtered_df_level_1['Pathology Level 2'] == selected_pathology_level_2]


    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 3 t·ª´ d·ªØ li·ªáu ƒë√£ l·ªçc
    pathology_level_3_list = filtered_df_level_2['Pathology Level 3'].unique().tolist()

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 3
    selected_pathology_level_3 = st.selectbox(
        "Choisir la pathologie du niveau 3 (Sous-groupe d√©taill√© de pathologies)",
        pathology_level_3_list,
        index=len(pathology_level_3_list) - 1,  # ƒê·∫∑t gi√° tr·ªã cu·ªëi l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        key="pathology_level_3_select"
    )

    filtered_df = filtered_df_level_2.loc[
        (filtered_df_level_2['Pathology Level 3'] == selected_pathology_level_3) & 
        (filtered_df_level_2['Region'] != 99)
    ].copy()  # T·∫°o m·ªôt b·∫£n sao r√µ r√†ng

    # C√°c c·ªôt c·∫ßn hi·ªÉn th·ªã v√† ki·ªÉm tra
    columns_to_display = ["Region Name", "Patient Count (top)"]

    if all(col in filtered_df.columns for col in columns_to_display):
        # L·ªçc v√† s·∫Øp x·∫øp d·ªØ li·ªáu
        filtered_df_display = filtered_df[columns_to_display].sort_values(
            by="Patient Count (top)", ascending=True
        )

        # T·∫°o bi·ªÉu ƒë·ªì thanh ngang
        fig = px.bar(
            filtered_df_display,
            y="Region Name",  # Tr·ª•c Y l√† t√™n v√πng
            x="Patient Count (top)",  # Tr·ª•c X l√† s·ªë l∆∞·ª£ng b·ªánh nh√¢n
            orientation="h",  # Thanh ngang
            text="Patient Count (top)",  # Hi·ªÉn th·ªã d·ªØ li·ªáu tr√™n thanh
        )

        # L√†m tr√≤n gi√° tr·ªã hi·ªÉn th·ªã tr√™n thanh
        fig.update_traces(
            texttemplate="%{text:,}".replace(",", " "),  # Hi·ªÉn th·ªã d·ªØ li·ªáu v·ªõi kho·∫£ng c√°ch cho h√†ng ngh√¨n
            textposition="outside",  # Hi·ªÉn th·ªã d·ªØ li·ªáu b√™n trong thanh
            marker_color="#1b1bf7",  # M√†u xanh d∆∞∆°ng
            marker_line_width=0,  # Lo·∫°i b·ªè vi·ªÅn c·ªßa thanh
            width=0.4,  # L√†m m·ªèng c√°c thanh bi·ªÉu ƒë·ªì
        )

        # T√πy ch·ªânh giao di·ªán
        fig.update_layout(
            template="none",  # Lo·∫°i b·ªè template m·∫∑c ƒë·ªãnh
            paper_bgcolor="rgba(0,0,0,0)",  # N·ªÅn to√†n b·ªô bi·ªÉu ƒë·ªì trong su·ªët
            plot_bgcolor="rgba(0,0,0,0)",  # N·ªÅn b√™n trong v√πng bi·ªÉu ƒë·ªì trong su·ªët
            margin=dict(t=20, l=200, r=20, b=20),  # Gi·∫£m margin b√™n ph·∫£i ƒë·ªÉ cƒÉn tr√°i
            height=450,  # TƒÉng chi·ªÅu cao bi·ªÉu ƒë·ªì
            xaxis=dict(
                title=None,  # Lo·∫°i b·ªè ti√™u ƒë·ªÅ tr·ª•c X
                showgrid=False,  # Lo·∫°i b·ªè l∆∞·ªõi tr√™n tr·ª•c X
                zeroline=False,  # Lo·∫°i b·ªè ƒë∆∞·ªùng zero
                showticklabels=False,  # Lo·∫°i b·ªè nh√£n tr√™n tr·ª•c X
            ),
            yaxis=dict(
                title=None,  # Lo·∫°i b·ªè ti√™u ƒë·ªÅ tr·ª•c Y
                tickfont=dict(size=12),  # TƒÉng c·ª° ch·ªØ ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß t√™n v√πng
                showline=False,  # Lo·∫°i b·ªè ƒë∆∞·ªùng vi·ªÅn
                automargin=True,  # T·ª± ƒë·ªông cƒÉn ch·ªânh margin ƒë·ªÉ t√™n hi·ªÉn th·ªã r√µ r√†ng
            ),
        )

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
        st.plotly_chart(fig, use_container_width=True)

        # D·ªçn d·∫πp d·ªØ li·ªáu t·∫°m th·ªùi
        del filtered_df_display
        gc.collect()
    else:
        st.error(f"One or more columns from {columns_to_display} are missing in the filtered data.")

    # Gi·∫£ s·ª≠ filtered_df ƒë√£ ƒë∆∞·ª£c l·ªçc theo nƒÉm v√† Pathology Levels
    columns_to_display = ["Region Name", "Patient Count (top)"]
    if all(col in filtered_df.columns for col in columns_to_display):
        # L·∫•y d·ªØ li·ªáu ch·ªâ v·ªõi c√°c c·ªôt c·∫ßn thi·∫øt
        data = filtered_df[columns_to_display]

        # Ki·ªÉm tra v√† ƒëi·ªÅn gi√° tr·ªã thi·∫øu
        data["Region Name"] = data["Region Name"].fillna("Non renseign√©")

        # T√≠nh to√°n c√°c ch·ªâ s·ªë th·ªëng k√™
        max_region = data.loc[data["Patient Count (top)"].idxmax()]
        min_region = data.loc[data["Patient Count (top)"].idxmin()]
        avg_patient_count = round(data["Patient Count (top)"].mean())
        median_patient_count = round(data["Patient Count (top)"].median())

        # X·ª≠ l√Ω gi√° tr·ªã hi·ªÉn th·ªã v·ªõi ƒë·ªãnh d·∫°ng s·ªë
        max_patient_count = f"{int(max_region['Patient Count (top)']):,}".replace(",", " ")
        min_patient_count = f"{int(min_region['Patient Count (top)']):,}".replace(",", " ")
        avg_patient_count_display = f"{avg_patient_count:,}".replace(",", " ")
        median_patient_count_display = f"{median_patient_count:,}".replace(",", " ")

        # D·ªçn d·∫πp d·ªØ li·ªáu t·∫°m th·ªùi
        del data
        gc.collect()

        # Hi·ªÉn th·ªã c√°c n√∫t v·ªõi th√¥ng tin th·ªëng k√™
        st.markdown(f"""
        <style>
        .stat-box {{
            display: flex;
            justify-content: space-between;
            align-items: stretch; /* CƒÉn ƒë·ªÅu chi·ªÅu cao c√°c n√∫t */
            margin-top: 20px;
        }}
        .stat-item {{
            text-align: center;
            background-color: #ffcc00;
            padding: 15px; /* Gi·∫£m padding ƒë·ªÉ n√∫t nh·ªè g·ªçn h∆°n */
            border-radius: 10px;
            flex: 1;
            margin: 0 10px;
            color: white;
            font-family: Arial, sans-serif;
            box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
            display: flex;
            flex-direction: column; /* CƒÉn ch·ªânh theo chi·ªÅu d·ªçc */
            justify-content: center; /* CƒÉn gi·ªØa n·ªôi dung */
            align-items: center; /* CƒÉn gi·ªØa n·ªôi dung */
            min-height: 150px; /* Gi·∫£m chi·ªÅu cao t·ªëi thi·ªÉu */
            max-height: 150px; /* Gi·∫£m chi·ªÅu cao t·ªëi ƒëa */
        }}
        .stat-item span {{
            font-size: 16px;  /* K√≠ch th∆∞·ªõc ch·ªØ nh·ªè h∆°n cho t√™n v√πng */
            font-weight: 400; /* L√†m ch·ªØ thanh m·∫£nh */
        }}
        .stat-item small {{
            font-size: 12px;  /* K√≠ch th∆∞·ªõc nh·ªè h∆°n cho m√¥ t·∫£ */
            font-weight: 300; /* L√†m ch·ªØ m·ªèng h∆°n */
            margin-top: 8px; /* Gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c th√†nh ph·∫ßn */
        }}
        .stat-item .number {{
            font-size: 24px; /* K√≠ch th∆∞·ªõc ch·ªØ cho s·ªë li·ªáu */
            font-weight: 600; /* L√†m ch·ªØ ƒë·∫≠m h∆°n cho s·ªë li·ªáu */
            margin-top: 5px; /* Kho·∫£ng c√°ch gi·ªØa t√™n v√† s·ªë li·ªáu */
        }}
        .red {{background-color: #ff5733;}}
        .green {{background-color: #28a745;}}
        .blue {{background-color: #007bff;}}
        .orange {{background-color: #ffcc00;}}
        </style>
        <div class="stat-box">
            <div class="stat-item red">
                <span>{max_region['Region Name']}</span>
                <span class="number">{max_patient_count}</span>
                <small>R√©gion avec le plus de patients</small>
            </div>
            <div class="stat-item green">
                <span>{min_region['Region Name']}</span>
                <span class="number">{min_patient_count}</span>
                <small>R√©gion avec le moins de patients</small>
            </div>
            <div class="stat-item blue">
                <span class="number">{avg_patient_count_display}</span>
                <small>Moyenne des patients par r√©gion</small>
            </div>
            <div class="stat-item orange">
                <span class="number">{median_patient_count_display}</span>
                <small>M√©diane des patients par r√©gion</small>
            </div>
        </div>
    """, unsafe_allow_html=True)

    # Ch√®n m·ªôt d√≤ng tr·ªëng gi·ªØa kh·ªëi th·ªëng k√™ v√† b·∫£n ƒë·ªì
    st.markdown("<br>", unsafe_allow_html=True)

     # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu ƒë√£ l·ªçc c√≥ c√°c c·ªôt c·∫ßn thi·∫øt
    required_columns = ["Region Name", "Patient Count (top)"]

    if all(column in filtered_df.columns for column in required_columns):
        # Chu·∫©n b·ªã d·ªØ li·ªáu
        map_data = filtered_df[["Region Name", "Patient Count (top)"]].copy()
        map_data = map_data.dropna(subset=["Patient Count (top)"])  # Lo·∫°i b·ªè gi√° tr·ªã NaN

        # Ki·ªÉm tra n·∫øu map_data c√≤n d·ªØ li·ªáu
        if map_data.empty:
            st.error("No valid data available after cleaning.")
        else:
            # ƒê∆∞·ªùng d·∫´n t·ªõi t·ªáp GeoJSON ch·ª©a th√¥ng tin bi√™n gi·ªõi c·ªßa c√°c v√πng
            geojson_url = "https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/regions.geojson"

            # T·∫£i GeoJSON
            import requests
            response = requests.get(geojson_url)
            if response.status_code != 200:
                st.error("Failed to load GeoJSON data.")
            else:
                geojson_data = response.json()

                # Th√™m d·ªØ li·ªáu v√†o GeoJSON (mapping Region Name -> Patient Count)
                for feature in geojson_data["features"]:
                    region_name = feature["properties"]["nom"]  # Thu·ªôc t√≠nh 'nom' l√† t√™n v√πng
                    if region_name in map_data["Region Name"].values:
                        # L·∫•y gi√° tr·ªã duy nh·∫•t t∆∞∆°ng ·ª©ng v·ªõi Region Name
                        patient_count = map_data.loc[
                            map_data["Region Name"] == region_name, "Patient Count (top)"
                        ].iloc[0]
                        feature["properties"]["Patient Count (top)"] = int(patient_count)
                    else:
                        feature["properties"]["Patient Count (top)"] = "No Data"

                # Kh·ªüi t·∫°o b·∫£n ƒë·ªì trung t√¢m t·∫°i Ph√°p
                m = folium.Map(location=[46.603354, 1.888334], zoom_start=6)

                # √Ånh x·∫° d·ªØ li·ªáu v√†o GeoJSON
                folium.Choropleth(
                    geo_data=geojson_data,
                    name="choropleth",
                    data=map_data,
                    columns=["Region Name", "Patient Count (top)"],  # D·ªØ li·ªáu √°nh x·∫°
                    key_on="feature.properties.nom",  # Thu·ªôc t√≠nh trong GeoJSON t∆∞∆°ng ·ª©ng v·ªõi "Region Name"
                    fill_color="YlOrRd",  # Thang m√†u (v√†ng ƒë·∫øn ƒë·ªè)
                    fill_opacity=0.7,
                    line_opacity=0.2,
                    nan_fill_color="#e1ebf5",  # ƒê·ªïi m√†u m·∫∑c ƒë·ªãnh cho v√πng kh√¥ng c√≥ d·ªØ li·ªáu th√†nh xanh d∆∞∆°ng nh·∫°t
                    legend_name="Patient Count (top)",
                ).add_to(m)

                # Th√™m tooltip hi·ªÉn th·ªã th√¥ng tin khi tr·ªè chu·ªôt
                folium.GeoJson(
                    geojson_data,
                    style_function=lambda x: {
                        "fillColor": "YlOrRd",
                        "color": "black",
                        "weight": 0.2,
                        "dashArray": "5, 5",
                    },
                    tooltip=folium.features.GeoJsonTooltip(
                        fields=["nom", "Patient Count (top)"],  # Hi·ªÉn th·ªã t√™n v√πng v√† s·ªë b·ªánh nh√¢n
                        aliases=["Region: ", "Patients: "],  # Nh√£n hi·ªÉn th·ªã
                        style="font-size:12px;",  # Ki·ªÉu ch·ªØ
                        localize=True,
                    ),
                ).add_to(m)

                # Hi·ªÉn th·ªã b·∫£n ƒë·ªì trong Streamlit
                st_folium(m, width=800, height=600)

                # D·ªçn d·∫πp d·ªØ li·ªáu GeoJSON
                del geojson_data, m, map_data
                gc.collect()
    else:
        st.error("Les colonnes 'Region Name' et 'Patient Count (top)' sont manquantes dans les donn√©es.")

    # G·ªôp d·ªØ li·ªáu qua c√°c nƒÉm nh∆∞ng ch·ªâ l·ªçc theo Pathology Levels ƒë√£ ch·ªçn
    all_years_data = []

    # Duy·ªát qua t·ª´ng nƒÉm
    for year in years:
        # L·∫•y d·ªØ li·ªáu t·ª´ng nƒÉm
        df_year = load_patients_by_region_data(year).copy()  # G·ªçi h√†m v·ªõi year l√†m tham s·ªë

        # L·ªçc theo Pathology Level 1
        filtered_df_level_1 = df_year[df_year['Pathology Level 1'] == selected_pathology_level_1]

        # L·ªçc theo Pathology Level 2
        filtered_df_level_2 = filtered_df_level_1[filtered_df_level_1['Pathology Level 2'] == selected_pathology_level_2]

        filtered_df = filtered_df_level_2.loc[
            (filtered_df_level_2['Pathology Level 3'] == selected_pathology_level_3) &
            (filtered_df_level_2['Region'] != 99)
        ].copy()  # Th√™m .copy() ƒë·ªÉ tr√°nh c·∫£nh b√°o

        # Th√™m c·ªôt nƒÉm v√†o DataFrame
        filtered_df["Year"] = year

        # Append d·ªØ li·ªáu ƒë√£ l·ªçc v√†o danh s√°ch
        all_years_data.append(filtered_df)

        # X√≥a d·ªØ li·ªáu trung gian sau khi append
        del df_year, filtered_df_level_1, filtered_df_level_2, filtered_df
        gc.collect()  # D·ªçn r√°c

    # K·∫øt h·ª£p t·∫•t c·∫£ d·ªØ li·ªáu qua c√°c nƒÉm
    combined_data = pd.concat(all_years_data, ignore_index=True)

    # X√≥a danh s√°ch d·ªØ li·ªáu trung gian
    del all_years_data
    gc.collect()  # D·ªçn r√°c

    # Nh√≥m d·ªØ li·ªáu theo Region v√† Year ƒë·ªÉ t√≠nh t·ªïng s·ªë b·ªánh nh√¢n
    region_year_data = combined_data.groupby(["Region Name", "Year"])["Patient Count (top)"].sum().reset_index()

    # X√≥a d·ªØ li·ªáu trung gian
    del combined_data
    gc.collect()  # D·ªçn r√°c

    # T·∫°o bi·ªÉu ƒë·ªì ƒë∆∞·ªùng ƒë·ªÉ hi·ªÉn th·ªã evolution
    fig = px.line(
        region_year_data,
        x="Year",
        y="Patient Count (top)",
        color="Region Name",  # Ph√¢n bi·ªát theo t·ª´ng v√πng
        labels={"Patient Count (top)": "Nombre de patients", "Year": "Ann√©e"},
        title=f"√âvolution du nombre de patients pour {selected_pathology_level_1}, {selected_pathology_level_2}, {selected_pathology_level_3}"
    )

    # T√πy ch·ªânh giao di·ªán bi·ªÉu ƒë·ªì
    fig.update_layout(
        template="simple_white",
        title_x=0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
        legend_title_text="R√©gion",
        xaxis=dict(title="Ann√©e"),
        yaxis=dict(title="Nombre de patients"),
        margin=dict(l=50, r=50, t=50, b=50),  # CƒÉn ch·ªânh margin
        height=500  # Chi·ªÅu cao c·ªßa bi·ªÉu ƒë·ªì
    )

    # Hi·ªÉn th·ªã g·ª£i √Ω ngay tr∆∞·ªõc bi·ªÉu ƒë·ªì
    st.markdown("""
    <p style="font-size: 14px; font-style: italic; color: gray;">
    Astuce : Cliquez sur les noms des r√©gions dans la l√©gende pour les masquer/afficher.
    </p>
    """, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.plotly_chart(fig, use_container_width=True)

    # L·∫•y danh s√°ch c√°c v√πng t·ª´ d·ªØ li·ªáu
    regions_list = region_year_data["Region Name"].unique().tolist()

    # S·∫Øp x·∫øp danh s√°ch c√°c v√πng theo th·ª© t·ª± ch·ªØ c√°i (t√πy ch·ªçn)
    regions_list.sort()

    # Dropdown ƒë·ªÉ ch·ªçn v√πng
    selected_region = st.selectbox(
        "Choisir une r√©gion :", 
        options=regions_list, 
        index=0
    )

    # L·ªçc d·ªØ li·ªáu theo v√πng ƒë∆∞·ª£c ch·ªçn
    region_data = region_year_data[region_year_data["Region Name"] == selected_region]

    # X√≥a d·ªØ li·ªáu trung gian sau khi l·ªçc
    del region_year_data
    gc.collect()

    # T·∫°o bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu hi·ªÉn th·ªã cho t·ª´ng nƒÉm
    fig = px.line(
        region_data,
        x="Year",
        y="Patient Count (top)",
        labels={"Patient Count (top)": "Nombre de patients", "Year": "Ann√©e"},
        title=f"√âvolution du nombre de patients pour la r√©gion {selected_region}"
    )

    # Th√™m c√°c ƒëi·ªÉm d·ªØ li·ªáu (markers) v√† hi·ªÉn th·ªã gi√° tr·ªã
    fig.update_traces(
        mode="lines+markers+text",  # Hi·ªÉn th·ªã ƒë∆∞·ªùng, ƒëi·ªÉm v√† nh√£n
        text=region_data["Patient Count (top)"],  # Nh√£n gi√° tr·ªã t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng nƒÉm
        textposition="top center",  # V·ªã tr√≠ c·ªßa nh√£n
        line_color="#1b1bf7"  # M√†u ƒë∆∞·ªùng l√† xanh d∆∞∆°ng ƒë·∫≠m
    )

    # C·∫≠p nh·∫≠t giao di·ªán bi·ªÉu ƒë·ªì
    fig.update_layout(
        template="none",  # X√≥a template m·∫∑c ƒë·ªãnh
        height=500,  # Chi·ªÅu cao c·ªßa bi·ªÉu ƒë·ªì
        title={
            "text": f"√âvolution du nombre de patients pour la r√©gion {selected_region}",
            "x": 0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            "xanchor": "center"
        },
        xaxis=dict(
            title="Ann√©e",  # Ti√™u ƒë·ªÅ tr·ª•c X
            showgrid=False  # Lo·∫°i b·ªè l∆∞·ªõi
        ),
        yaxis=dict(
            title="Nombre de patients",  # Ti√™u ƒë·ªÅ tr·ª•c Y
            showgrid=True  # Hi·ªÉn th·ªã l∆∞·ªõi ƒë·ªÉ d·ªÖ nh√¨n h∆°n
        )
    )

    # Hi·ªÉn th·ªã g·ª£i √Ω ngay tr∆∞·ªõc bi·ªÉu ƒë·ªì
    st.markdown("""
    <p style="font-size: 14px; font-style: italic; color: gray;">
    Astuce : Si vous souhaitez zoomer sur l'√©volution d'une seule r√©gion, veuillez s√©lectionner la r√©gion dans la liste d√©roulante ci-dessous.
    </p>
    """, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.plotly_chart(fig, use_container_width=True)

    # X√≥a d·ªØ li·ªáu sau khi hi·ªÉn th·ªã
    del region_data
    gc.collect()


###############################################################################################

# Main Content: Hi·ªÉn th·ªã n·ªôi dung theo trang ƒë∆∞·ª£c ch·ªçn
if st.session_state.page == "D√©partement":
    st.markdown("""
        <h1 style="color: #00008B; text-align: center; font-size: 30px;">
            Analyse des donn√©es par d√©partement !
        </h1>
    """, unsafe_allow_html=True)

    st.markdown("""
        <p style="text-align: center; font-style: italic; font-weight: 300; font-size: 16px;">
            Utilisez les options ci-dessous pour analyser les donn√©es.
        </p>
    """, unsafe_allow_html=True)

    # L·ª±a ch·ªçn nƒÉm t·ª´ nƒÉm 2015 ƒë·∫øn 2022 v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 2022
    selected_year = st.selectbox(
        "Choisir l'ann√©e:", 
        list(range(2015, 2023)), 
        index=len(range(2015, 2023)) - 1,  # ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† nƒÉm cu·ªëi c√πng trong danh s√°ch (nƒÉm 2022)
        key="year_select_departement"  # ƒê·∫∑t m·ªôt key duy nh·∫•t ƒë·ªÉ tr√°nh tr√πng l·∫∑p ID
    )

    # Load d·ªØ li·ªáu cho nƒÉm ƒë∆∞·ª£c ch·ªçn t·ª´ dictionary
    df = load_patients_by_department_data(selected_year)
    # L·ªçc b·ªè d√≤ng c√≥ gi√° tr·ªã "Hors France M√©tropolitaine" trong c·ªôt "Department Name"
    df = df[df["Department Name"] != "Hors France M√©tropolitaine"].copy()

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 1
    pathology_level_1_list = df['Pathology Level 1'].unique()

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 1 v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† "Diab√®te" n·∫øu c√≥
    default_index_level_1 = list(pathology_level_1_list).index("Cancers") if "Cancers" in pathology_level_1_list else 0
    selected_pathology_level_1 = st.selectbox(
        "Choisir la pathologie du niveau 1",
        pathology_level_1_list,
        index=default_index_level_1,
        key="pathology_level_1_select_departement"
    )

    # L·ªçc d·ªØ li·ªáu theo Pathology Level 1
    filtered_df_level_1 = df[df['Pathology Level 1'] == selected_pathology_level_1]

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 2 t·ª´ d·ªØ li·ªáu ƒë√£ l·ªçc
    pathology_level_2_list = filtered_df_level_1['Pathology Level 2'].unique().tolist()

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 2
    selected_pathology_level_2 = st.selectbox(
        "Choisir la pathologie du niveau 2 (Sous-groupe de pathologies)",
        pathology_level_2_list,
        index=len(pathology_level_2_list) - 1,  # ƒê·∫∑t gi√° tr·ªã cu·ªëi l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        key="pathology_level_2_select_departement"
    )
    filtered_df_level_2 = filtered_df_level_1[filtered_df_level_1['Pathology Level 2'] == selected_pathology_level_2]

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 3 t·ª´ d·ªØ li·ªáu ƒë√£ l·ªçc
    pathology_level_3_list = filtered_df_level_2['Pathology Level 3'].unique().tolist()

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 3
    selected_pathology_level_3 = st.selectbox(
        "Choisir la pathologie du niveau 3 (Sous-groupe d√©taill√© de pathologies)",
        pathology_level_3_list,
        index=len(pathology_level_3_list) - 1,  # ƒê·∫∑t gi√° tr·ªã cu·ªëi l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        key="pathology_level_3_select_departement"
    )

    filtered_df = filtered_df_level_2.loc[
        (filtered_df_level_2['Pathology Level 3'] == selected_pathology_level_3) & 
        (filtered_df_level_2['Department'] != 99)
    ].copy()  # T·∫°o m·ªôt b·∫£n sao r√µ r√†ng
    

    # T·∫£i d·ªØ li·ªáu staged_data_year cho nƒÉm ƒë∆∞·ª£c ch·ªçn
    staged_data_year = load_staged_data(selected_year)

    # L·ªçc d·ªØ li·ªáu t·ª´ b·∫£ng staged_data_year theo c√°c gi√° tr·ªã ƒë√£ ch·ªçn
    filtered_staged_data = staged_data_year.loc[
        (staged_data_year['Year'] == selected_year) &
        (staged_data_year['Pathology Level 1'] == selected_pathology_level_1) &
        (staged_data_year['Pathology Level 2'] == selected_pathology_level_2) &
        (staged_data_year['Pathology Level 3'] == selected_pathology_level_3) &
        (staged_data_year["Gender Label"] != "tous sexes") &
        (staged_data_year["Age Group Label"] != "tous √¢ges") &
        (staged_data_year["Department"] != 999) &
        (staged_data_year["Region"] != 99)
    ].copy()

    # C√°c c·ªôt c·∫ßn hi·ªÉn th·ªã v√† ki·ªÉm tra
    columns_to_display = ["Department Name", "Age Group Label", "Patient Count (top)", "Total Population", "Prevalence"]

    if all(col in filtered_staged_data.columns for col in columns_to_display):
        # L·ªçc, lo·∫°i b·ªè c√°c h√†ng c√≥ "Department Name" l√† "Hors France M√©tropolitaine" ho·∫∑c "Patient Count (top)" r·ªóng
        filtered_df_display = (
            filtered_staged_data.loc[
                (filtered_staged_data["Department Name"] != "Hors France M√©tropolitaine") &  # Lo·∫°i b·ªè d√≤ng kh√¥ng mong mu·ªën
                (filtered_staged_data["Patient Count (top)"].notna())  # Lo·∫°i b·ªè d√≤ng c√≥ gi√° tr·ªã r·ªóng
            ][columns_to_display]
            .drop_duplicates()  # Lo·∫°i b·ªè c√°c d√≤ng tr√πng l·∫∑p
            .sort_values(by=["Department Name", "Patient Count (top)"], ascending=[True, False])  # S·∫Øp x·∫øp theo t√™n v√πng v√† gi√° tr·ªã b·ªánh nh√¢n
        )

        # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu trong Streamlit
        st.dataframe(filtered_df_display, use_container_width=True)

        # D·ªçn d·∫πp d·ªØ li·ªáu t·∫°m th·ªùi
        del filtered_df_display #, filtered_staged_data
        gc.collect()
    else:
        st.error(f"One or more columns from {columns_to_display} are missing in the filtered data.")

    # Gi·∫£ s·ª≠ filtered_df ƒë√£ ƒë∆∞·ª£c l·ªçc theo nƒÉm v√† Pathology Levels
    columns_to_display = ["Department Name", "Patient Count (top)"]
    if all(col in filtered_df.columns for col in columns_to_display):
        # L·∫•y d·ªØ li·ªáu ch·ªâ v·ªõi c√°c c·ªôt c·∫ßn thi·∫øt
        data = filtered_df[columns_to_display]

        # Ki·ªÉm tra v√† ƒëi·ªÅn gi√° tr·ªã thi·∫øu
        data.loc[:, "Department Name"] = data["Department Name"].fillna("Non renseign√©")

        # T√≠nh to√°n c√°c ch·ªâ s·ªë th·ªëng k√™
        max_department = data.loc[data["Patient Count (top)"].idxmax()]
        min_department = data.loc[data["Patient Count (top)"].idxmin()]
        avg_patient_count = round(data["Patient Count (top)"].mean())
        median_patient_count = round(data["Patient Count (top)"].median())

        # X·ª≠ l√Ω gi√° tr·ªã hi·ªÉn th·ªã v·ªõi ƒë·ªãnh d·∫°ng s·ªë
        max_patient_count = f"{int(max_department['Patient Count (top)']):,}".replace(",", " ")
        min_patient_count = f"{int(min_department['Patient Count (top)']):,}".replace(",", " ")
        avg_patient_count_display = f"{avg_patient_count:,}".replace(",", " ")
        median_patient_count_display = f"{median_patient_count:,}".replace(",", " ")

        # Hi·ªÉn th·ªã c√°c n√∫t v·ªõi th√¥ng tin th·ªëng k√™
        st.markdown(f"""
            <style>
            .stat-box {{
                display: flex;
                justify-content: space-between;
                align-items: stretch; /* CƒÉn ƒë·ªÅu chi·ªÅu cao c√°c n√∫t */
                margin-top: 20px;
            }}
            .stat-item {{
                text-align: center;
                background-color: #ffcc00;
                padding: 15px; /* Gi·∫£m padding ƒë·ªÉ n√∫t nh·ªè g·ªçn h∆°n */
                border-radius: 10px;
                flex: 1;
                margin: 0 10px;
                color: white;
                font-family: Arial, sans-serif;
                box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
                display: flex;
                flex-direction: column; /* CƒÉn ch·ªânh theo chi·ªÅu d·ªçc */
                justify-content: center; /* CƒÉn gi·ªØa n·ªôi dung */
                align-items: center; /* CƒÉn gi·ªØa n·ªôi dung */
                min-height: 150px; /* Gi·∫£m chi·ªÅu cao t·ªëi thi·ªÉu */
                max-height: 150px; /* Gi·∫£m chi·ªÅu cao t·ªëi ƒëa */
            }}
            .stat-item span {{
                font-size: 16px;  /* C·ª° ch·ªØ cho s·ªë gi·ªëng region */
                font-weight: bold; /* Ch·ªØ ƒë·∫≠m gi·ªëng region */
            }}
            .stat-item small {{
                font-size: 12px;  /* C·ª° ch·ªØ m√¥ t·∫£ gi·ªëng region */
                font-weight: 300; /* Ch·ªØ m·ªèng gi·ªëng region */
                margin-top: 10px;
            }}
            .stat-item .number {{
                font-size: 24px; /* K√≠ch th∆∞·ªõc ch·ªØ cho s·ªë li·ªáu */
                font-weight: 600; /* L√†m ch·ªØ ƒë·∫≠m h∆°n cho s·ªë li·ªáu */
                margin-top: 5px; /* Kho·∫£ng c√°ch gi·ªØa t√™n v√† s·ªë li·ªáu */
            }}
            .red {{background-color: #ff5733;}}
            .green {{background-color: #28a745;}}
            .blue {{background-color: #007bff;}}
            .orange {{background-color: #ffcc00;}}
            </style>
            <div class="stat-box">
                <div class="stat-item red">
                    <span>{max_department['Department Name']}</span>
                    <span>{max_patient_count}</span>
                    <small>D√©partement avec le plus de patients</small>
                </div>
                <div class="stat-item green">
                    <span>{min_department['Department Name']}</span>
                    <span>{min_patient_count}</span>
                    <small>D√©partement avec le moins de patients</small>
                </div>
                <div class="stat-item blue">
                    <span>{avg_patient_count_display}</span>
                    <small>Moyenne des patients par d√©partement</small>
                </div>
                <div class="stat-item orange">
                    <span>{median_patient_count_display}</span>
                    <small>M√©diane des patients par d√©partement</small>
                </div>
            </div>
        """, unsafe_allow_html=True)

        # D·ªçn d·∫πp d·ªØ li·ªáu t·∫°m th·ªùi
        del data
        gc.collect()
    else:
        st.error(f"One or more columns from {columns_to_display} are missing in the filtered data.")
    
    # Ch√®n m·ªôt d√≤ng tr·ªëng gi·ªØa kh·ªëi th·ªëng k√™ v√† b·∫£n ƒë·ªì
    st.markdown("<br>", unsafe_allow_html=True)

    # Ph·∫ßn b·∫£n ƒë·ªì
    if all(column in filtered_df.columns for column in columns_to_display):
        # Chu·∫©n b·ªã d·ªØ li·ªáu
        map_data = filtered_df[["Department Name", "Patient Count (top)"]].copy()
        map_data = map_data.dropna(subset=["Patient Count (top)"])  # Lo·∫°i b·ªè gi√° tr·ªã NaN

         # Ki·ªÉm tra n·∫øu map_data c√≤n d·ªØ li·ªáu
        if map_data.empty:
            st.error("No valid data available after cleaning.")
        else:
            # ƒê∆∞·ªùng d·∫´n t·ªõi t·ªáp GeoJSON ch·ª©a th√¥ng tin bi√™n gi·ªõi c·ªßa c√°c v√πng
            geojson_url = "https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/departements.geojson"

            # T·∫£i GeoJSON
            import requests
            response = requests.get(geojson_url)
            if response.status_code != 200:
                st.error("Failed to load GeoJSON data.")
            else:
                geojson_data = response.json()

                # Th√™m d·ªØ li·ªáu v√†o GeoJSON (mapping Department Name -> Patient Count)
                for feature in geojson_data["features"]:
                    department_name = feature["properties"]["nom"]  # Thu·ªôc t√≠nh 'nom' l√† t√™n v√πng
                    if department_name in map_data["Department Name"].values:
                        # L·∫•y gi√° tr·ªã duy nh·∫•t t∆∞∆°ng ·ª©ng v·ªõi Department Name
                        patient_count = map_data.loc[
                            map_data["Department Name"] == department_name, "Patient Count (top)"
                        ].iloc[0]
                        feature["properties"]["Patient Count (top)"] = int(patient_count)
                    else:
                        feature["properties"]["Patient Count (top)"] = None

                # T√¨m gi√° tr·ªã min v√† max
                min_value = map_data["Patient Count (top)"].min()
                max_value = map_data["Patient Count (top)"].max()

                # Kh·ªüi t·∫°o b·∫£n ƒë·ªì trung t√¢m t·∫°i Ph√°p
                m = folium.Map(location=[46.603354, 1.888334], zoom_start=6)

                # √Ånh x·∫° d·ªØ li·ªáu v√†o GeoJSON
                folium.Choropleth(
                    geo_data=geojson_data,
                    name="choropleth",
                    data=map_data,
                    columns=["Department Name", "Patient Count (top)"],  # D·ªØ li·ªáu √°nh x·∫°
                    key_on="feature.properties.nom",  # Thu·ªôc t√≠nh trong GeoJSON t∆∞∆°ng ·ª©ng v·ªõi "Department Name"
                    fill_color="YlOrRd",  # Thang m√†u (v√†ng ƒë·∫øn ƒë·ªè)
                    fill_opacity=0.7,
                    line_opacity=0,
                    nan_fill_color="#e1ebf5",  # ƒê·ªïi m√†u m·∫∑c ƒë·ªãnh cho v√πng kh√¥ng c√≥ d·ªØ li·ªáu th√†nh xanh d∆∞∆°ng nh·∫°t
                    legend_name="Patient Count (top)",
                    threshold_scale=[
                        min_value,
                        min_value + (max_value - min_value) * 0.25,
                        min_value + (max_value - min_value) * 0.5,
                        min_value + (max_value - min_value) * 0.75,
                        max_value,
                    ],
                ).add_to(m)

                # Th√™m tooltip hi·ªÉn th·ªã th√¥ng tin khi tr·ªè chu·ªôt
                folium.GeoJson(
                    geojson_data,
                    tooltip=folium.features.GeoJsonTooltip(
                        fields=["nom", "Patient Count (top)"],  # Hi·ªÉn th·ªã t√™n v√πng v√† s·ªë b·ªánh nh√¢n
                        aliases=["Department: ", "Patients: "],  # Nh√£n hi·ªÉn th·ªã
                        style="font-size:12px;",  # Ki·ªÉu ch·ªØ
                        localize=True,
                    ),
                    
                ).add_to(m)

                # Hi·ªÉn th·ªã b·∫£n ƒë·ªì trong Streamlit
                st_folium(m, width=800, height=600)

                # D·ªçn d·∫πp d·ªØ li·ªáu GeoJSON
                del geojson_data, m, map_data
                gc.collect()

    else:
        st.error("Les colonnes 'Department Name' et 'Patient Count (top)' sont manquantes dans les donn√©es.")

    # G·ªôp d·ªØ li·ªáu qua c√°c nƒÉm nh∆∞ng ch·ªâ l·ªçc theo Pathology Levels ƒë√£ ch·ªçn
    all_years_data = []

    # Duy·ªát qua t·ª´ng nƒÉm
    for year in years:
        # L·∫•y d·ªØ li·ªáu t·ª´ng nƒÉm
        df_year = load_patients_by_department_data(year).copy()  # G·ªçi h√†m v·ªõi year l√†m tham s·ªë

        # Lo·∫°i b·ªè gi√° tr·ªã "Hors France M√©tropolitaine"
        df_year = df_year[df_year["Department Name"] != "Hors France M√©tropolitaine"]

        # L·ªçc theo Pathology Level 1
        filtered_df_level_1 = df_year[df_year['Pathology Level 1'] == selected_pathology_level_1]

        # L·ªçc theo Pathology Level 2
        filtered_df_level_2 = filtered_df_level_1[filtered_df_level_1['Pathology Level 2'] == selected_pathology_level_2]

        # L·ªçc theo Pathology Level 3
        filtered_df = filtered_df_level_2.loc[
            (filtered_df_level_2['Pathology Level 3'] == selected_pathology_level_3) &
            (filtered_df_level_2['Department'] != 999)
        ].copy()

        # Th√™m c·ªôt nƒÉm v√†o DataFrame
        filtered_df["Year"] = year

        # Append d·ªØ li·ªáu ƒë√£ l·ªçc v√†o danh s√°ch
        all_years_data.append(filtered_df)

        # D·ªçn d·∫πp d·ªØ li·ªáu t·∫°m th·ªùi
        del df_year, filtered_df_level_1, filtered_df_level_2, filtered_df
        gc.collect()

    # K·∫øt h·ª£p t·∫•t c·∫£ d·ªØ li·ªáu qua c√°c nƒÉm (th·ª±c hi·ªán ngo√†i v√≤ng l·∫∑p)
    combined_data = pd.concat(all_years_data, ignore_index=True)

    # Nh√≥m d·ªØ li·ªáu theo Department v√† Year ƒë·ªÉ t√≠nh t·ªïng s·ªë b·ªánh nh√¢n
    department_year_data = combined_data.groupby(["Department Name", "Year"])["Patient Count (top)"].sum().reset_index()

    # X√≥a d·ªØ li·ªáu trung gian
    del all_years_data, combined_data
    gc.collect()

    # Dropdown ƒë·ªÉ ch·ªçn d√©partement
    departments_list = department_year_data["Department Name"].unique().tolist()
    departments_list.sort()  # S·∫Øp x·∫øp t√™n d√©partement theo th·ª© t·ª± ch·ªØ c√°i
    selected_department = st.selectbox(
        "Choisir un d√©partement :", 
        options=departments_list, 
        index=0
    )

    # L·ªçc d·ªØ li·ªáu theo d√©partement ƒë∆∞·ª£c ch·ªçn
    department_data = department_year_data[department_year_data["Department Name"] == selected_department]

    # T·∫°o bi·ªÉu ƒë·ªì v·ªõi d·ªØ li·ªáu hi·ªÉn th·ªã cho t·ª´ng nƒÉm
    fig = px.line(
        department_data,
        x="Year",
        y="Patient Count (top)",
        labels={"Patient Count (top)": "Nombre de patients", "Year": "Ann√©e"},
        title=f"√âvolution du nombre de patients pour le d√©partement {selected_department}"
    )

    # Th√™m c√°c ƒëi·ªÉm d·ªØ li·ªáu (markers) v√† hi·ªÉn th·ªã gi√° tr·ªã
    fig.update_traces(
        mode="lines+markers+text",  # Hi·ªÉn th·ªã ƒë∆∞·ªùng, ƒëi·ªÉm v√† nh√£n
        text=department_data["Patient Count (top)"],  # Nh√£n gi√° tr·ªã t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng nƒÉm
        textposition="top center",  # V·ªã tr√≠ c·ªßa nh√£n
        line_color="#1b1bf7"  # M√†u ƒë∆∞·ªùng l√† xanh d∆∞∆°ng ƒë·∫≠m
    )

    # C·∫≠p nh·∫≠t giao di·ªán bi·ªÉu ƒë·ªì
    fig.update_layout(
        template="none",  # X√≥a template m·∫∑c ƒë·ªãnh
        height=500,  # Chi·ªÅu cao c·ªßa bi·ªÉu ƒë·ªì
        title={
            "text": f"√âvolution du nombre de patients pour le d√©partement {selected_department}",
            "x": 0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ
            "xanchor": "center"
        },
        xaxis=dict(
            title="Ann√©e",  # Ti√™u ƒë·ªÅ tr·ª•c X
            showgrid=False  # Lo·∫°i b·ªè l∆∞·ªõi
        ),
        yaxis=dict(
            title="Nombre de patients",  # Ti√™u ƒë·ªÅ tr·ª•c Y
            showgrid=True  # Hi·ªÉn th·ªã l∆∞·ªõi ƒë·ªÉ d·ªÖ nh√¨n h∆°n
        )
    )

    # Hi·ªÉn th·ªã g·ª£i √Ω ngay tr∆∞·ªõc bi·ªÉu ƒë·ªì
    st.markdown("""
    <p style="font-size: 14px; font-style: italic; color: gray;">
    Astuce : Si vous souhaitez zoomer sur l'√©volution d'un seul d√©partement, veuillez s√©lectionner le d√©partement dans la liste d√©roulante ci-dessus.
    </p>
    """, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.plotly_chart(fig, use_container_width=True)

    # D·ªçn d·∫πp d·ªØ li·ªáu sau khi hi·ªÉn th·ªã
    del department_year_data, department_data
    gc.collect()

    # C√°c c·ªôt c·∫ßn hi·ªÉn th·ªã v√† ki·ªÉm tra
    columns_to_display = ["Department Name", "Age Group Label", "Patient Count (top)"]

    if all(col in filtered_staged_data.columns for col in columns_to_display):
        # L·ªçc, lo·∫°i b·ªè c√°c h√†ng c√≥ "Department Name" l√† "Hors France M√©tropolitaine" ho·∫∑c "Patient Count (top)" r·ªóng
        filtered_df_display = (
            filtered_staged_data.loc[
                (filtered_staged_data["Department Name"] != "Hors France M√©tropolitaine") &  # Lo·∫°i b·ªè d√≤ng kh√¥ng mong mu·ªën
                (filtered_staged_data["Patient Count (top)"].notna())  # Lo·∫°i b·ªè d√≤ng c√≥ gi√° tr·ªã r·ªóng
            ][columns_to_display]
            .drop_duplicates()  # Lo·∫°i b·ªè c√°c d√≤ng tr√πng l·∫∑p
            .sort_values(by=["Department Name", "Patient Count (top)"], ascending=[True, False])  # S·∫Øp x·∫øp theo t√™n v√πng v√† gi√° tr·ªã b·ªánh nh√¢n
        )

        # L·ªçc b·ªè c√°c h√†ng c√≥ "Age Group Label" l√† "tous √¢ges" v√† t·∫°o b·∫£n sao
        filtered_age_data = filtered_df_display.loc[
            filtered_df_display["Age Group Label"] != "tous √¢ges"
        ].copy()

        # L·ªçc d·ªØ li·ªáu theo Department ƒë∆∞·ª£c ch·ªçn
        filtered_age_data_department = filtered_age_data.loc[
            filtered_age_data["Department Name"] == selected_department
        ]

        # T·∫°o b·∫£ng t·ªïng h·ª£p s·ªë l∆∞·ª£ng b·ªánh nh√¢n theo `Age Group Label`
        age_class_distribution = (
            filtered_age_data_department.groupby("Age Group Label")["Patient Count (top)"]
            .sum()
            .reset_index()
        )

        # Ki·ªÉm tra n·∫øu b·∫£ng t·ªïng h·ª£p kh√¥ng r·ªóng
        if not age_class_distribution.empty:
            # T√≠nh t·ªïng s·ªë b·ªánh nh√¢n ƒë·ªÉ t√≠nh ph·∫ßn trƒÉm
            total_patients = age_class_distribution["Patient Count (top)"].sum()

            # Th√™m c·ªôt ph·∫ßn trƒÉm
            age_class_distribution["Percentage"] = (
                age_class_distribution["Patient Count (top)"] / total_patients * 100
            )

            # L·ªçc b·ªè c√°c nh√≥m tu·ªïi chi·∫øm d∆∞·ªõi 0.1%
            filtered_age_class_distribution = age_class_distribution[
                age_class_distribution["Percentage"] >= 0.1
            ]

            # T·∫°o bi·ªÉu ƒë·ªì h√¨nh tr√≤n n·∫øu d·ªØ li·ªáu c√≤n l·∫°i kh√¥ng r·ªóng
            if not filtered_age_class_distribution.empty:
                fig_pie = px.pie(
                    filtered_age_class_distribution,
                    names="Age Group Label",  # C·ªôt ch·ª©a t√™n ph√¢n l·ªõp tu·ªïi
                    values="Patient Count (top)",  # C·ªôt ch·ª©a gi√° tr·ªã s·ªë l∆∞·ª£ng b·ªánh nh√¢n
                    title=f"<b>R√©partition des classes d'√¢ge pour la pathologie s√©lectionn√©e </b>",
                    hole=0.4,  # Bi·ªÉu ƒë·ªì donut (l·ªó gi·ªØa)
                )

                # T√πy ch·ªânh giao di·ªán bi·ªÉu ƒë·ªì
                fig_pie.update_traces(
                    textinfo="percent",  # Ch·ªâ hi·ªÉn th·ªã ph·∫ßn trƒÉm
                    hoverinfo="label+percent+value",  # Hi·ªÉn th·ªã th√¥ng tin khi hover
                    textfont_size=14,  # TƒÉng k√≠ch th∆∞·ªõc font ch·ªØ
                )

                # T√πy ch·ªânh layout
                fig_pie.update_layout(
                    title=dict(
                        text=f"<b>R√©partition des classes d'√¢ge pour la pathologie s√©lectionn√©e </b>",
                        x=0.1,  # CƒÉn l·ªÅ tr√°i ti√™u ƒë·ªÅ
                        font=dict(size=18),  # TƒÉng k√≠ch th∆∞·ªõc ti√™u ƒë·ªÅ
                    ),
                    showlegend=True,  # Hi·ªÉn th·ªã legend (ch√∫ gi·∫£i)
                    legend=dict(
                        title="Classe d'√¢ge",  # Ti√™u ƒë·ªÅ c·ªßa legend
                        orientation="v",  # ƒê·∫∑t legend theo chi·ªÅu d·ªçc
                        x=1.05,  # ƒê·∫∑t legend sang b√™n ph·∫£i
                        y=0.5,  # CƒÉn gi·ªØa legend theo chi·ªÅu d·ªçc
                        font=dict(size=12),  # TƒÉng k√≠ch th∆∞·ªõc ch·ªØ c·ªßa legend
                    ),
                    margin=dict(t=70, l=50, r=120, b=50),  # ƒêi·ªÅu ch·ªânh l·ªÅ ƒë·ªÉ c√≥ ch·ªó cho legend
                    height=500,  # TƒÉng chi·ªÅu cao bi·ªÉu ƒë·ªì
                    width=750,  # TƒÉng chi·ªÅu r·ªông bi·ªÉu ƒë·ªì ƒë·ªÉ c√≥ ƒë·ªß kh√¥ng gian cho legend
                )

                # Hi·ªÉn th·ªã g·ª£i √Ω tr∆∞·ªõc bi·ªÉu ƒë·ªì
                st.markdown("""
                <p style="font-size: 14px; font-style: italic; color: gray; text-align: center;">
                Astuce : Survolez les parties du graphique pour voir plus de d√©tails interactifs.
                </p>
                """, unsafe_allow_html=True)

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
                st.plotly_chart(fig_pie, use_container_width=False)  # Kh√¥ng t·ª± ƒë·ªông ch·ªânh k√≠ch th∆∞·ªõc theo container

            else:
                st.error("Aucune classe d'√¢ge avec un pourcentage sup√©rieur ou √©gal √† 0.1% n'a √©t√© trouv√©e.")

        else:
            st.error("Les colonnes n√©cessaires pour g√©n√©rer le graphique ne sont pas disponibles.")

        # D·ªçn d·∫πp d·ªØ li·ªáu t·∫°m th·ªùi
        del filtered_df_display, filtered_staged_data, filtered_age_data_department
        gc.collect()
    else:
        st.error(f"One or more columns from {columns_to_display} are missing in the filtered data.")


###############################################################################################

elif st.session_state.page == "Age":
    st.markdown("""
        <h1 style="color: #00008B; text-align: center; font-size: 30px;">
            Analyse des pathologies par √¢ge
        </h1>
    """, unsafe_allow_html=True)

    # T·∫£i v√† cache d·ªØ li·ªáu
    combined_data = pd.concat(
        [load_and_cache_data(year) for year in range(2015, 2023)], ignore_index=True
    )

    # T·∫°o session_state
    if combined_data not in st.session_state:
        st.session_state.combined_data = combined_data  # T·∫°o DataFrame

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho "Age Group Label"
    age_groups = (
        combined_data["Age Group Label"]
        .drop_duplicates()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .sort_values()  # S·∫Øp x·∫øp theo th·ª© t·ª± tƒÉng d·∫ßn
        .tolist()  # Chuy·ªÉn sang danh s√°ch
    )

    # T·∫°o n√∫t ch·ªçn cho nh√≥m tu·ªïi
    selected_age_group = st.selectbox(
        "Choisir un groupe d'√¢ge pour analyser:", 
        options=age_groups, 
        index=0  # ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† gi√° tr·ªã ƒë·∫ßu ti√™n
    )

    # L·ªçc d·ªØ li·ªáu trong combined_data d·ª±a tr√™n nh√≥m tu·ªïi ƒë∆∞·ª£c ch·ªçn
    filtered_combined_data = combined_data.loc[
        combined_data["Age Group Label"] == selected_age_group
    ].copy()

    # D·ªçn d·∫πp danh s√°ch d·ªØ li·ªáu t·∫°m th·ªùi
    del combined_data
    gc.collect()

   # L·∫•y danh s√°ch duy nh·∫•t c√°c t√™n Pathology Level 1 t·ª´ d·ªØ li·ªáu ƒë√£ l·ªçc
    pathology_level_1_list = (
        filtered_combined_data["Pathology Level 1"]
        .drop_duplicates()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .sort_values()  # S·∫Øp x·∫øp theo th·ª© t·ª± tƒÉng d·∫ßn
        .reset_index(drop=True)  # Reset ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
    )

    # Ki·ªÉm tra n·∫øu danh s√°ch kh√¥ng r·ªóng
    if not pathology_level_1_list.empty:
        st.markdown("### Liste des pathologies (Niveau 1)")
        # Hi·ªÉn th·ªã danh s√°ch d∆∞·ªõi d·∫°ng b·∫£ng
        st.table(pathology_level_1_list.to_frame(name="Pathology Level 1"))
    else:
        st.warning("Aucune pathologie disponible pour le groupe d'√¢ge s√©lectionn√©.")

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 1
    pathology_level_1_list = filtered_combined_data["Pathology Level 1"].drop_duplicates().sort_values().tolist()

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 1 v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† gi√° tr·ªã ƒë·∫ßu ti√™n trong danh s√°ch
    selected_pathology_level_1 = st.selectbox(
        "Choisir la pathologie du niveau 1",
        pathology_level_1_list,
        index=0,  # ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† gi√° tr·ªã ƒë·∫ßu ti√™n
        key="pathology_level_1_select_age"
    )

    # L·ªçc d·ªØ li·ªáu theo Pathology Level 1
    filtered_df_level_1 = filtered_combined_data[filtered_combined_data["Pathology Level 1"] == selected_pathology_level_1]

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 2, lo·∫°i b·ªè 'nan'
    pathology_level_2_list = (
        filtered_df_level_1["Pathology Level 2"]
        .dropna()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã NaN th·∫≠t
        .loc[lambda x: x != "nan"]  # Lo·∫°i b·ªè c√°c gi√° tr·ªã chu·ªói 'nan'
        .drop_duplicates()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .sort_values()  # S·∫Øp x·∫øp danh s√°ch theo th·ª© t·ª± tƒÉng d·∫ßn
        .tolist()  # Chuy·ªÉn ƒë·ªïi th√†nh danh s√°ch
    )

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 2
    selected_pathology_level_2 = st.selectbox(
        "Choisir la pathologie du niveau 2 (Sous-groupe de pathologies)",
        pathology_level_2_list,
        index=len(pathology_level_2_list) - 1,  # ƒê·∫∑t gi√° tr·ªã cu·ªëi l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        key="pathology_level_2_select_departement"
    )

    # L·ªçc d·ªØ li·ªáu theo Pathology Level 2
    filtered_df_level_2 = filtered_df_level_1[filtered_df_level_1["Pathology Level 2"] == selected_pathology_level_2]

    # Lo·∫°i b·ªè c·∫£ NaN v√† 'nan' kh·ªèi danh s√°ch
    pathology_level_3_list = (
        filtered_df_level_2["Pathology Level 3"]
        .dropna()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã NaN th·∫≠t
        .loc[lambda x: x != "nan"]  # Lo·∫°i b·ªè c√°c gi√° tr·ªã chu·ªói 'nan'
        .drop_duplicates()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .sort_values()  # S·∫Øp x·∫øp danh s√°ch theo th·ª© t·ª± tƒÉng d·∫ßn
        .tolist()  # Chuy·ªÉn ƒë·ªïi th√†nh danh s√°ch
    )

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 3
    selected_pathology_level_3 = st.selectbox(
        "Choisir la pathologie du niveau 3 (Sous-groupe d√©taill√© de pathologies)",
        pathology_level_3_list,
        index=len(pathology_level_3_list) - 1,  # ƒê·∫∑t gi√° tr·ªã cu·ªëi l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        key="pathology_level_3_select_departement"
    )

    # L·ªçc d·ªØ li·ªáu theo Pathology Level 3 v√† nh√≥m tu·ªïi
    filtered_data = filtered_df_level_2.loc[
        (filtered_df_level_2["Pathology Level 3"] == selected_pathology_level_3) &
        (filtered_df_level_2["Age Group Label"] == selected_age_group)
    ].copy()

    del filtered_df_level_1, filtered_df_level_2
    gc.collect()

    # L·ªçc d·ªØ li·ªáu ch·ªâ gi·ªØ l·∫°i nh·ªØng d√≤ng m√† "Patient Count (top)" kh√¥ng ph·∫£i null
    filtered_data_non_null = filtered_data[filtered_data["Patient Count (top)"].notnull()]
    # S·∫Øp x·∫øp d·ªØ li·ªáu theo c·ªôt "Patient Count (top)" gi·∫£m d·∫ßn
    filtered_data_non_null = filtered_data_non_null.sort_values(by="Patient Count (top)", ascending=False)

    # Group by "Department Name" v√† "Gender Label", t√≠nh t·ªïng "Patient Count (top)"
    grouped_data = (
        filtered_data_non_null.groupby(["Department Name", "Gender Label"])["Patient Count (top)"]
        .sum()
        .reset_index()
    )
    
    del filtered_data_non_null
    gc.collect()

    # # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu ƒë√£ l·ªçc c√≥ t·ªìn t·∫°i d√≤ng n√†o
    # if not grouped_data.empty:
    #     # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu ƒë√£ l·ªçc
    #     st.dataframe(
    #         grouped_data,
    #         use_container_width=True
    #     )
    # else:
    #     # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá
    #     st.warning("Aucune donn√©e patient n'existe pour le groupe d'√¢ge et la pathologie s√©lectionn√©s.")

    # # Hi·ªÉn th·ªã b·∫£ng t·ª∑ l·ªá ph·∫ßn trƒÉm
    # st.markdown("### Pourcentage des genres (National)")

    # T√≠nh t·ªïng s·ªë b·ªánh nh√¢n tr√™n c·∫£ n∆∞·ªõc
    total_patients_national = grouped_data["Patient Count (top)"].sum()

    # T√≠nh t·ªïng s·ªë b·ªánh nh√¢n theo gi·ªõi t√≠nh tr√™n c·∫£ n∆∞·ªõc
    national_gender_distribution = (
        grouped_data.groupby("Gender Label")["Patient Count (top)"]
        .sum()
        .reset_index()
    )

    # Th√™m c·ªôt t·ª∑ l·ªá ph·∫ßn trƒÉm
    national_gender_distribution["% Gender"] = (
        national_gender_distribution["Patient Count (top)"] / total_patients_national * 100
    )

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n
    fig_pie = px.pie(
        national_gender_distribution,
        names="Gender Label",  # C·ªôt ch·ª©a t√™n gi·ªõi t√≠nh
        values="Patient Count (top)",  # Gi√° tr·ªã l√† s·ªë b·ªánh nh√¢n
        hole=0.4,  # Bi·ªÉu ƒë·ªì donut (c√≥ l·ªó ·ªü gi·ªØa)
    )

    # T√πy ch·ªânh giao di·ªán bi·ªÉu ƒë·ªì
    fig_pie.update_traces(
        textinfo="percent+label",  # Hi·ªÉn th·ªã nh√£n v√† ph·∫ßn trƒÉm
        hoverinfo="label+percent+value",  # Hi·ªÉn th·ªã th√¥ng tin khi hover
    )
    fig_pie.update_layout(
        legend=dict(
            title="Genre",  # Ti√™u ƒë·ªÅ c·ªßa legend
            orientation="v",  # ƒê·∫∑t legend theo chi·ªÅu d·ªçc
            x=1.05,  # ƒê·∫∑t legend sang b√™n ph·∫£i
            y=0.5,  # CƒÉn gi·ªØa legend theo chi·ªÅu d·ªçc
            font=dict(size=12),  # TƒÉng k√≠ch th∆∞·ªõc ch·ªØ c·ªßa legend
        ),
        margin=dict(t=70, l=50, r=150, b=50),  # ƒêi·ªÅu ch·ªânh l·ªÅ
        height=400,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
        width=600,  # Chi·ªÅu r·ªông bi·ªÉu ƒë·ªì
    )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.plotly_chart(fig_pie, use_container_width=False)

    del national_gender_distribution
    gc.collect()

    # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu ƒë√£ l·ªçc c√≥ t·ªìn t·∫°i d√≤ng n√†o
    if not grouped_data.empty:
        # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu ƒë√£ l·ªçc
        st.dataframe(
            grouped_data, #[["Department Name", "Age Group Label","Gender Label", "Patient Count (top)"]],
            use_container_width=True
        )
    else:
        # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá
        st.warning("Aucune donn√©e patient n'existe pour le groupe d'√¢ge et la pathologie s√©lectionn√©s.")

    # Ph·∫ßn b·∫£n ƒë·ªì
    map_data = grouped_data[["Department Name", "Patient Count (top)"]].copy()
    map_data = map_data.dropna(subset=["Patient Count (top)"])  # Lo·∫°i b·ªè gi√° tr·ªã NaN

    # Ki·ªÉm tra n·∫øu map_data c√≤n d·ªØ li·ªáu
    if map_data.empty:
        st.error("No valid data available after cleaning.")
    else:
        # ƒê∆∞·ªùng d·∫´n t·ªõi t·ªáp GeoJSON ch·ª©a th√¥ng tin bi√™n gi·ªõi c·ªßa c√°c v√πng
        geojson_url = "https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/departements.geojson"

        # T·∫£i GeoJSON
        import requests
        response = requests.get(geojson_url)
        if response.status_code != 200:
            st.error("Failed to load GeoJSON data.")
        else:
            geojson_data = response.json()

            # Th√™m d·ªØ li·ªáu v√†o GeoJSON (mapping Department Name -> Patient Count)
            for feature in geojson_data["features"]:
                department_name = feature["properties"]["nom"]  # Thu·ªôc t√≠nh 'nom' l√† t√™n v√πng
                if department_name in map_data["Department Name"].values:
                    # L·∫•y gi√° tr·ªã duy nh·∫•t t∆∞∆°ng ·ª©ng v·ªõi Department Name
                    patient_count = map_data.loc[
                        map_data["Department Name"] == department_name, "Patient Count (top)"
                    ].iloc[0]
                    feature["properties"]["Patient Count (top)"] = int(patient_count)
                else:
                    feature["properties"]["Patient Count (top)"] = None

            # T√¨m gi√° tr·ªã min v√† max
            min_value = map_data["Patient Count (top)"].min()
            max_value = map_data["Patient Count (top)"].max()

            # Kh·ªüi t·∫°o b·∫£n ƒë·ªì trung t√¢m t·∫°i Ph√°p
            m = folium.Map(location=[46.603354, 1.888334], zoom_start=6)

            # √Ånh x·∫° d·ªØ li·ªáu v√†o GeoJSON
            folium.Choropleth(
                geo_data=geojson_data,
                name="choropleth",
                data=map_data,
                columns=["Department Name", "Patient Count (top)"],  # D·ªØ li·ªáu √°nh x·∫°
                key_on="feature.properties.nom",  # Thu·ªôc t√≠nh trong GeoJSON t∆∞∆°ng ·ª©ng v·ªõi "Department Name"
                fill_color="YlOrRd",  # Thang m√†u (v√†ng ƒë·∫øn ƒë·ªè)
                fill_opacity=0.7,
                line_opacity=0,
                nan_fill_color="#e1ebf5",  # ƒê·ªïi m√†u m·∫∑c ƒë·ªãnh cho v√πng kh√¥ng c√≥ d·ªØ li·ªáu th√†nh xanh d∆∞∆°ng nh·∫°t
                legend_name="Patient Count (top)",
                threshold_scale=[
                    min_value,
                    min_value + (max_value - min_value) * 0.25,
                    min_value + (max_value - min_value) * 0.5,
                    min_value + (max_value - min_value) * 0.75,
                    max_value,
                ],
            ).add_to(m)

            # Th√™m tooltip hi·ªÉn th·ªã th√¥ng tin khi tr·ªè chu·ªôt
            folium.GeoJson(
                geojson_data,
                tooltip=folium.features.GeoJsonTooltip(
                    fields=["nom", "Patient Count (top)"],  # Hi·ªÉn th·ªã t√™n v√πng v√† s·ªë b·ªánh nh√¢n
                    aliases=["Department: ", "Patients: "],  # Nh√£n hi·ªÉn th·ªã
                    style="font-size:12px;",  # Ki·ªÉu ch·ªØ
                    localize=True,
                ),
                
            ).add_to(m)

            # Hi·ªÉn th·ªã b·∫£n ƒë·ªì trong Streamlit
            st_folium(m, width=800, height=600)

            # D·ªçn d·∫πp d·ªØ li·ªáu GeoJSON
            del geojson_data, m, map_data
            gc.collect()


###############################################################################################

elif st.session_state.page == "Sexe":
    st.markdown("""
        <h1 style="color: #00008B; text-align: center; font-size: 30px;">
            Analyse des pathologies par sexe
        </h1>
    """, unsafe_allow_html=True)

    # T·∫£i v√† cache d·ªØ li·ªáu
    combined_data = pd.concat(
        [load_and_cache_data(year) for year in range(2015, 2023)], ignore_index=True
    )

    # T·∫°o session_state
    if combined_data not in st.session_state:
        st.session_state.combined_data = combined_data  # T·∫°o DataFrame


    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique
    sex_groups = (
        combined_data["Gender Label"]
        .drop_duplicates()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .sort_values()  # S·∫Øp x·∫øp theo th·ª© t·ª± tƒÉng d·∫ßn
        .tolist()  # Chuy·ªÉn sang danh s√°ch
    )

    # T·∫°o n√∫t ch·ªçn 
    selected_sex_group = st.selectbox(
        "Choisir un sexe pour analyser:", 
        options=sex_groups, 
        index=0  # ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† gi√° tr·ªã ƒë·∫ßu ti√™n
    )

    # L·ªçc d·ªØ li·ªáu trong combined_data d·ª±a tr√™n nh√≥m tu·ªïi ƒë∆∞·ª£c ch·ªçn
    filtered_combined_data = combined_data.loc[
        combined_data["Gender Label"] == selected_sex_group
    ].copy()

    # D·ªçn d·∫πp danh s√°ch d·ªØ li·ªáu t·∫°m th·ªùi
    del st.session_state.combined_data, combined_data
    gc.collect()

    # L·∫•y danh s√°ch duy nh·∫•t c√°c t√™n Pathology Level 1 t·ª´ d·ªØ li·ªáu ƒë√£ l·ªçc
    pathology_level_1_list = (
        filtered_combined_data["Pathology Level 1"]
        .drop_duplicates()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .sort_values()  # S·∫Øp x·∫øp theo th·ª© t·ª± tƒÉng d·∫ßn
        .reset_index(drop=True)  # Reset ch·ªâ s·ªë ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
    )

    # Ki·ªÉm tra n·∫øu danh s√°ch kh√¥ng r·ªóng
    if not pathology_level_1_list.empty:
        st.markdown("### Liste des pathologies (Niveau 1)")
        # Hi·ªÉn th·ªã danh s√°ch d∆∞·ªõi d·∫°ng b·∫£ng
        st.table(pathology_level_1_list.to_frame(name="Pathology Level 1"))
    else:
        st.warning("Aucune pathologie disponible pour le groupe d'√¢ge s√©lectionn√©.")

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 1
    pathology_level_1_list = filtered_combined_data["Pathology Level 1"].drop_duplicates().sort_values().tolist()

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 1 v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† gi√° tr·ªã ƒë·∫ßu ti√™n trong danh s√°ch
    selected_pathology_level_1 = st.selectbox(
        "Choisir la pathologie du niveau 1",
        pathology_level_1_list,
        index=0,  # ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† gi√° tr·ªã ƒë·∫ßu ti√™n
        key="pathology_level_1_select_age"
    )

    # L·ªçc d·ªØ li·ªáu theo Pathology Level 1
    filtered_df_level_1 = filtered_combined_data[filtered_combined_data["Pathology Level 1"] == selected_pathology_level_1]

    # T·∫°o danh s√°ch c√°c gi√° tr·ªã unique cho Pathology Level 2, lo·∫°i b·ªè 'nan'
    pathology_level_2_list = (
        filtered_df_level_1["Pathology Level 2"]
        .dropna()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã NaN th·∫≠t
        .loc[lambda x: x != "nan"]  # Lo·∫°i b·ªè c√°c gi√° tr·ªã chu·ªói 'nan'
        .drop_duplicates()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .sort_values()  # S·∫Øp x·∫øp danh s√°ch theo th·ª© t·ª± tƒÉng d·∫ßn
        .tolist()  # Chuy·ªÉn ƒë·ªïi th√†nh danh s√°ch
    )

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 2
    selected_pathology_level_2 = st.selectbox(
        "Choisir la pathologie du niveau 2 (Sous-groupe de pathologies)",
        pathology_level_2_list,
        index=len(pathology_level_2_list) - 1,  # ƒê·∫∑t gi√° tr·ªã cu·ªëi l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        key="pathology_level_2_select_departement"
    )

    # L·ªçc d·ªØ li·ªáu theo Pathology Level 2
    filtered_df_level_2 = filtered_df_level_1[filtered_df_level_1["Pathology Level 2"] == selected_pathology_level_2]

    # Lo·∫°i b·ªè c·∫£ NaN v√† 'nan' kh·ªèi danh s√°ch
    pathology_level_3_list = (
        filtered_df_level_2["Pathology Level 3"]
        .dropna()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã NaN th·∫≠t
        .loc[lambda x: x != "nan"]  # Lo·∫°i b·ªè c√°c gi√° tr·ªã chu·ªói 'nan'
        .drop_duplicates()  # Lo·∫°i b·ªè c√°c gi√° tr·ªã tr√πng l·∫∑p
        .sort_values()  # S·∫Øp x·∫øp danh s√°ch theo th·ª© t·ª± tƒÉng d·∫ßn
        .tolist()  # Chuy·ªÉn ƒë·ªïi th√†nh danh s√°ch
    )

    # T·∫°o n√∫t ch·ªçn cho Pathology Level 3
    selected_pathology_level_3 = st.selectbox(
        "Choisir la pathologie du niveau 3 (Sous-groupe d√©taill√© de pathologies)",
        pathology_level_3_list,
        index=len(pathology_level_3_list) - 1,  # ƒê·∫∑t gi√° tr·ªã cu·ªëi l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        key="pathology_level_3_select_departement"
    )

    # L·ªçc d·ªØ li·ªáu theo Pathology Level 3 v√† nh√≥m tu·ªïi
    filtered_data = filtered_df_level_2.loc[
        (filtered_df_level_2["Pathology Level 3"] == selected_pathology_level_3) &
        (filtered_df_level_2["Gender Label"] == selected_sex_group)
    ].copy()

    del filtered_df_level_1, filtered_df_level_2
    gc.collect()

    # L·ªçc d·ªØ li·ªáu ch·ªâ gi·ªØ l·∫°i nh·ªØng d√≤ng m√† "Patient Count (top)" kh√¥ng ph·∫£i null
    filtered_data_non_null = filtered_data[filtered_data["Patient Count (top)"].notnull()]
    # S·∫Øp x·∫øp d·ªØ li·ªáu theo c·ªôt "Patient Count (top)" gi·∫£m d·∫ßn
    filtered_data_non_null = filtered_data_non_null.sort_values(by="Patient Count (top)", ascending=False)

    # Group by "Department Name" v√† "Age Group Label", t√≠nh t·ªïng "Patient Count (top)"
    grouped_data = (
        filtered_data_non_null.groupby(["Department Name", "Age Group Label"])["Patient Count (top)"]
        .sum()
        .reset_index()
    )
    
    del filtered_data_non_null
    gc.collect()

    # T√≠nh t·ªïng s·ªë b·ªánh nh√¢n tr√™n c·∫£ n∆∞·ªõc
    total_patients_national = grouped_data["Patient Count (top)"].sum()

    # T√≠nh t·ªïng s·ªë b·ªánh nh√¢n theo gi·ªõi t√≠nh tr√™n c·∫£ n∆∞·ªõc
    national_sex_distribution = (
        grouped_data.groupby("Age Group Label")["Patient Count (top)"]
        .sum()
        .reset_index()
    )

    # Th√™m c·ªôt t·ª∑ l·ªá ph·∫ßn trƒÉm
    national_sex_distribution["% Age"] = (
        national_sex_distribution["Patient Count (top)"] / total_patients_national * 100
    )

    # # T·∫°o m·ªôt c·ªôt m·ªõi ƒë·ªÉ ph√¢n lo·∫°i c√°c nh√≥m tu·ªïi
    # national_sex_distribution['Age Group Category'] = national_sex_distribution['% Age'].apply(
    #     lambda x: 'Others' if float(x.split('%')[0]) < 7 else x
    # )
    # def categorize_age_group(x):
    #     try:
    #         # Try converting to float first
    #         return 'Others' if float(x) < 7 else x
    #     except ValueError:
    #         # If conversion fails (likely a string), try splitting
    #         try:
    #             return 'Others' if float(x.split('%')[0]) < 7 else x
    #         except:
    #             # Handle unexpected values (optional)
    #             return 'Invalid'

    # national_sex_distribution['Age Group Category'] = national_sex_distribution['% Age'].apply(categorize_age_group)

    # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n
    fig_pie = px.pie(
        national_sex_distribution,
        names="Age Group Label",  # C·ªôt ch·ª©a t√™n gi·ªõi t√≠nh
        values="Patient Count (top)",  # Gi√° tr·ªã l√† s·ªë b·ªánh nh√¢n
        hole=0.4,  # Bi·ªÉu ƒë·ªì donut (c√≥ l·ªó ·ªü gi·ªØa)
    )

    # T√πy ch·ªânh giao di·ªán bi·ªÉu ƒë·ªì
    fig_pie.update_traces(
        textinfo="percent",  # Hi·ªÉn th·ªã nh√£n v√† ph·∫ßn trƒÉm
        hoverinfo="label+percent+value",  # Hi·ªÉn th·ªã th√¥ng tin khi hover
    )
    fig_pie.update_layout(
        legend=dict(
            title="Age",  # Ti√™u ƒë·ªÅ c·ªßa legend
            orientation="v",  # ƒê·∫∑t legend theo chi·ªÅu d·ªçc
            x=1.05,  # ƒê·∫∑t legend sang b√™n ph·∫£i
            y=0.5,  # CƒÉn gi·ªØa legend theo chi·ªÅu d·ªçc
            font=dict(size=12),  # TƒÉng k√≠ch th∆∞·ªõc ch·ªØ c·ªßa legend
        ),
        margin=dict(t=70, l=50, r=150, b=50),  # ƒêi·ªÅu ch·ªânh l·ªÅ
        height=400,  # Chi·ªÅu cao bi·ªÉu ƒë·ªì
        width=600,  # Chi·ªÅu r·ªông bi·ªÉu ƒë·ªì
    )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.plotly_chart(fig_pie, use_container_width=False)

    del national_sex_distribution
    gc.collect()

    # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu ƒë√£ l·ªçc c√≥ t·ªìn t·∫°i d√≤ng n√†o
    if not grouped_data.empty:
        # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu ƒë√£ l·ªçc
        st.dataframe(
            grouped_data,
            use_container_width=True
        )
    else:
        # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá
        st.warning("Aucune donn√©e patient n'existe pour le groupe d'√¢ge et la pathologie s√©lectionn√©s.")

    # Ph·∫ßn b·∫£n ƒë·ªì
    map_data = grouped_data[["Department Name", "Patient Count (top)"]].copy()
    map_data = map_data.dropna(subset=["Patient Count (top)"])  # Lo·∫°i b·ªè gi√° tr·ªã NaN

    # Ki·ªÉm tra n·∫øu map_data c√≤n d·ªØ li·ªáu
    if map_data.empty:
        st.error("No valid data available after cleaning.")
    else:
        # ƒê∆∞·ªùng d·∫´n t·ªõi t·ªáp GeoJSON ch·ª©a th√¥ng tin bi√™n gi·ªõi c·ªßa c√°c v√πng
        geojson_url = "https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/departements.geojson"

        # T·∫£i GeoJSON
        import requests
        response = requests.get(geojson_url)
        if response.status_code != 200:
            st.error("Failed to load GeoJSON data.")
        else:
            geojson_data = response.json()

            # Th√™m d·ªØ li·ªáu v√†o GeoJSON (mapping Department Name -> Patient Count)
            for feature in geojson_data["features"]:
                department_name = feature["properties"]["nom"]  # Thu·ªôc t√≠nh 'nom' l√† t√™n v√πng
                if department_name in map_data["Department Name"].values:
                    # L·∫•y gi√° tr·ªã duy nh·∫•t t∆∞∆°ng ·ª©ng v·ªõi Department Name
                    patient_count = map_data.loc[
                        map_data["Department Name"] == department_name, "Patient Count (top)"
                    ].iloc[0]
                    feature["properties"]["Patient Count (top)"] = int(patient_count)
                else:
                    feature["properties"]["Patient Count (top)"] = None

            # T√¨m gi√° tr·ªã min v√† max
            min_value = map_data["Patient Count (top)"].min()
            max_value = map_data["Patient Count (top)"].max()

            # Kh·ªüi t·∫°o b·∫£n ƒë·ªì trung t√¢m t·∫°i Ph√°p
            m = folium.Map(location=[46.603354, 1.888334], zoom_start=6)

            # √Ånh x·∫° d·ªØ li·ªáu v√†o GeoJSON
            folium.Choropleth(
                geo_data=geojson_data,
                name="choropleth",
                data=map_data,
                columns=["Department Name", "Patient Count (top)"],  # D·ªØ li·ªáu √°nh x·∫°
                key_on="feature.properties.nom",  # Thu·ªôc t√≠nh trong GeoJSON t∆∞∆°ng ·ª©ng v·ªõi "Department Name"
                fill_color="YlOrRd",  # Thang m√†u (v√†ng ƒë·∫øn ƒë·ªè)
                fill_opacity=0.7,
                line_opacity=0,
                nan_fill_color="#e1ebf5",  # ƒê·ªïi m√†u m·∫∑c ƒë·ªãnh cho v√πng kh√¥ng c√≥ d·ªØ li·ªáu th√†nh xanh d∆∞∆°ng nh·∫°t
                legend_name="Patient Count (top)",
                threshold_scale=[
                    min_value,
                    min_value + (max_value - min_value) * 0.25,
                    min_value + (max_value - min_value) * 0.5,
                    min_value + (max_value - min_value) * 0.75,
                    max_value,
                ],
            ).add_to(m)

            # Th√™m tooltip hi·ªÉn th·ªã th√¥ng tin khi tr·ªè chu·ªôt
            folium.GeoJson(
                geojson_data,
                tooltip=folium.features.GeoJsonTooltip(
                    fields=["nom", "Patient Count (top)"],  # Hi·ªÉn th·ªã t√™n v√πng v√† s·ªë b·ªánh nh√¢n
                    aliases=["Department: ", "Patients: "],  # Nh√£n hi·ªÉn th·ªã
                    style="font-size:12px;",  # Ki·ªÉu ch·ªØ
                    localize=True,
                ),
                
            ).add_to(m)

            # Hi·ªÉn th·ªã b·∫£n ƒë·ªì trong Streamlit
            st_folium(m, width=800, height=600)

            # D·ªçn d·∫πp d·ªØ li·ªáu GeoJSON
            del geojson_data, m, map_data
            gc.collect()

